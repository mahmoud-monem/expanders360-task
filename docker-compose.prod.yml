version: '3.8'

services:
  # PostgreSQL Database
  postgres:
    container_name: expanders360-postgres-prod
    image: kartoza/postgis:15-3.3
    restart: always
    environment:
      POSTGRES_USER: ${DB_USERNAME}
      POSTGRES_PASSWORD: ${DB_PASSWORD}
      POSTGRES_DB: ${DB_NAME}
    ports:
      - "${DB_PORT:-5432}:5432"
    volumes:
      - postgres_data_prod:/var/lib/postgresql/data
      - ./docker/mysql/init.sql:/docker-entrypoint-initdb.d/init.sql:ro
    networks:
      - expanders360-network-prod
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${DB_USERNAME} -d ${DB_NAME}"]
      interval: 30s
      timeout: 10s
      retries: 5

  # MongoDB Database
  mongodb:
    image: mongo:7.0
    container_name: expanders360-mongodb-prod
    restart: always
    environment:
      MONGO_INITDB_ROOT_USERNAME: ${MONGO_USERNAME:-admin}
      MONGO_INITDB_ROOT_PASSWORD: ${MONGO_PASSWORD:-admin_password}
      MONGO_INITDB_DATABASE: ${MONGO_DATABASE:-expanders360}
    ports:
      - "${MONGO_PORT:-27017}:27017"
    volumes:
      - mongodb_data_prod:/data/db
      - ./docker/mongodb/init.js:/docker-entrypoint-initdb.d/init.js:ro
    networks:
      - expanders360-network-prod
    healthcheck:
      test: ["CMD", "mongosh", "--eval", "db.admin.ping()"]
      interval: 30s
      timeout: 10s
      retries: 5

  # Redis (for Bull queues and caching)
  redis:
    image: redis:7.2-alpine
    container_name: expanders360-redis-prod
    restart: always
    ports:
      - "${REDIS_PORT:-6379}:6379"
    volumes:
      - redis_data_prod:/data
    networks:
      - expanders360-network-prod
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 5

  # MinIO S3 Storage
  minio:
    image: minio/minio:latest
    container_name: expanders360-minio-prod
    restart: always
    ports:
      - "${MINIO_PORT:-9000}:9000"
      - "${MINIO_CONSOLE_PORT:-9001}:9001"
    environment:
      MINIO_ROOT_USER: ${S3_ACCESS_KEY}
      MINIO_ROOT_PASSWORD: ${S3_SECRET_KEY}
    command: server /data --console-address ":9001"
    volumes:
      - minio_data_prod:/data
    networks:
      - expanders360-network-prod
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9000/minio/health/live"]
      interval: 30s
      timeout: 20s
      retries: 3

  # MinIO initialization service
  minio-init:
    image: minio/mc:latest
    container_name: expanders360-minio-init-prod
    depends_on:
      minio:
        condition: service_healthy
    volumes:
      - ./docker/minio/init.sh:/init.sh
    entrypoint: >
      /bin/sh -c "
      chmod +x /init.sh &&
      /init.sh
      "
    networks:
      - expanders360-network-prod

  # NestJS Application
  app:
    build:
      context: .
      dockerfile: Dockerfile
      target: production
    container_name: expanders360-app-prod
    restart: always
    environment:
      NODE_ENV: production
      APP_PORT: ${APP_PORT:-3000}
      APP_HOST: ${APP_HOST:-0.0.0.0}
      DB_HOST: postgres
      DB_PORT: 5432
      DB_USERNAME: ${DB_USERNAME}
      DB_PASSWORD: ${DB_PASSWORD}
      DB_NAME: ${DB_NAME}
      DB_SSL: ${DB_SSL:-false}
      MONGO_URI: mongodb://${MONGO_USERNAME:-admin}:${MONGO_PASSWORD:-admin_password}@mongodb:27017/${MONGO_DATABASE:-expanders360}?authSource=admin
      JWT_SECRET: ${JWT_SECRET}
      REDIS_HOST: redis
      REDIS_PORT: 6379
      S3_ENDPOINT: http://minio:9000
      S3_ACCESS_KEY: ${S3_ACCESS_KEY}
      S3_SECRET_KEY: ${S3_SECRET_KEY}
      S3_BUCKET_NAME: ${S3_BUCKET_NAME:-research-documents}
      S3_REGION: ${S3_REGION:-us-east-1}
      SMTP_HOST: ${SMTP_HOST}
      SMTP_PORT: ${SMTP_PORT:-587}
      SMTP_USER: ${SMTP_USER}
      SMTP_PASS: ${SMTP_PASS}
      ADMIN_EMAIL: ${ADMIN_EMAIL}
    ports:
      - "${APP_PORT:-3000}:3000"
    depends_on:
      postgres:
        condition: service_healthy
      mongodb:
        condition: service_healthy
      redis:
        condition: service_healthy
      minio:
        condition: service_healthy
    volumes:
      - ./logs:/app/logs
    networks:
      - expanders360-network-prod
    healthcheck:
      test: ["CMD", "node", "healthcheck.js"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # Nginx Reverse Proxy (Optional for production)
  nginx:
    image: nginx:alpine
    container_name: expanders360-nginx-prod
    restart: always
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/ssl:/etc/nginx/ssl:ro
    depends_on:
      - app
    networks:
      - expanders360-network-prod

volumes:
  mongodb_data_prod:
    driver: local
  redis_data_prod:
    driver: local
  postgres_data_prod:
    driver: local
  minio_data_prod:
    driver: local

networks:
  expanders360-network-prod:
    driver: bridge
